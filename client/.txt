 import React, { useContext, useState, useEffect } from 'react';
 import { Link } from 'react-router-dom';
 import { useNavigate } from 'react-router-dom';
 import { toast } from 'sonner';
 import { useAuth } from '..contextAuthContext.jsx';
 import { IoPersonCircleSharp } from "react-iconsio5";
 import { RiLogoutBoxRFill } from "react-iconsri";
 import { IoIosHeart } from "react-iconsio";
 import Search from '.SearchSearch.jsx';


 const NavBar = () => {
   const { user, isAuthenticated, logout } = useAuth();
   const navigate = useNavigate();

   const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
   const [activeMenu, setActiveMenu] = useState(null);
   const [hoverTimeout, setHoverTimeout] = useState(null);
   const [showLogoutConfirmation, setShowLogoutConfirmation] = useState(false);
   const [isDropdownOpen, setIsDropdownOpen] = useState(false);
   const [currentUser, setCurrentUser] = useState(null);

    האזן לשינויים בלוקל סטורג' כדי לזהות התחברות
   useEffect(() => {
     const checkUserData = () => {
       const userData = localStorage.getItem("user");
       if (userData) {
         try {
           setCurrentUser(JSON.parse(userData));
         } catch (error) {
           console.error("Error parsing user data:", error);
         }
       } else {
         setCurrentUser(null);
       }
     };

      בדוק מיד כשהקומפוננטה נטענת
     checkUserData();

      האזן לשינויים ב-localStorage
     window.addEventListener('storage', checkUserData);

      האזן לשינויים ב-user מ-AuthContext
     if (user) {
       setCurrentUser(user);
     }

     return () => {
       window.removeEventListener('storage', checkUserData);
     };
   }, [user]);

   const confirmLogout = () => {
     setShowLogoutConfirmation(true);
   };

   const toggleDropdown = (menuType) => {
     setActiveMenu(activeMenu === menuType ? null : menuType);
     setIsDropdownOpen(!isDropdownOpen);
   };

   const handleMouseEnter = (menuType) => {
     clearTimeout(hoverTimeout);
     setActiveMenu(menuType);
   };

   const handleMouseLeave = () => {
     const timeoutId = setTimeout(() => {
       setActiveMenu(null);
     }, 300);
     setHoverTimeout(timeoutId);
   };

    פונקציות חדשות לטיפול בהופעתהעלמת תפריט המשתמש
   const handleUserMenuEnter = () => {
     clearTimeout(hoverTimeout);
     setIsDropdownOpen(true);
   };

   const handleUserMenuLeave = () => {
     const timeoutId = setTimeout(() => {
       setIsDropdownOpen(false);
     }, 300);
     setHoverTimeout(timeoutId);
   };

   const toggleMobileMenu = () => {
     setIsMobileMenuOpen(!isMobileMenuOpen);
   };

   useEffect(() => {
     const handleClickOutside = (event) => {
       const isMenuButton = event.target.closest('button[data-menu-trigger]');
       if (!isMenuButton) {
         const dropdown = document.getElementById('dropdownMenu');
         if (dropdown && !dropdown.contains(event.target)) {
           setActiveMenu(null);
         }
       }
     };

     document.addEventListener('click', handleClickOutside);

     return () => {
       document.removeEventListener('click', handleClickOutside);
     };
   }, []);

   const renderDropdownMenu = (menuType) => {
     const menuItems = {
       dairy: {
         title: 'חלבי',
         items: [
           { to: 'DairyDishes', icon: '', text: 'מנות' },
           { to: 'DairyDesserts', icon: '', text: 'קינוחים' },
         ]
       },
       parve: {
         title: ' מתכונים פרווה',
         items: [
           { to: 'FurDishes', icon: '', text: 'מנות' },
           { to: 'FurDesserts', icon: '', text: 'קינוחים' },
           { to: 'FurSoups', icon: '', text: 'מרקים' }
         ]
       },
       meat: {
         title: ' מתכונים בשרי',
         items: [
           { to: 'MeatDishes', icon: '', text: 'מנות' },
           { to: 'MeatSoups', icon: '', text: 'מרקים' }
         ]
       },
     };

     const menu = menuItems[menuType];
     if (!menu) return null;

     return (
       <div
         className="relative inline-block"
         onMouseEnter={() => handleMouseEnter(menuType)}
         onMouseLeave={handleMouseLeave}
       >
         <button
           data-menu-trigger
           className={`px-3 py-2 font-bold rounded-md text-lg ${activeMenu === menuType ? 'font-bold bg-gray-700' : 'hover:bg-gray-700'
             }`}
           onClick={(e) => {
             e.stopPropagation();
             toggleDropdown(menuType);
           }}
         >
           {menu.title}
         <button>

         {activeMenu === menuType && (
           <div
             id="dropdownMenu"
             className="text-lg font-bold absolute right-0 mt-2 w-48 bg-white text-black rounded-md shadow-lg z-50"
             style={{ minWidth: '200px' }}
           >
             {menu.items.map((item, index) => (
               <Link
                 key={index}
                 to={item.to}
                 className="block px-4 py-3 hover:bg-gray-100 transition-colors duration-200"
                 onClick={() => setActiveMenu(null)}
               >
                 <span className="flex items-center gap-2">
                   {item.icon} {item.text}
                 <span>
               <Link>
             ))}
           <div>
         )}
       <div>
     );
   };

   const LogOut = () => {
     logout();
     toast.success('התנתקת בהצלחה !');
     setShowLogoutConfirmation(false);
     setIsDropdownOpen(false);
     navigate('login')
   };

   const cancelLogout = () => {
     setShowLogoutConfirmation(false);
   };

    console.log("Current user:", currentUser);

   return (
     <>
       <nav className="bg-gray-800 text-white fixed top-0 w-full z-50" dir="rtl">
         <div className="mx-auto max-w-7xl px-2 sm:px-6 lg:px-8">
           <div className="relative flex h-16 items-center justify-between">
             <div className="absolute inset-y-0 left-0 flex items-center sm:hidden">
               <button
                 onClick={toggleMobileMenu}
                 className="text-xl font-bold p-2 rounded-md text-gray-400 hover:bg-gray-700 hover:text-white"
               >
                 <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                   <path
                     strokeLinecap="round"
                     strokeLinejoin="round"
                     strokeWidth="2"
                     d={isMobileMenuOpen ? "M6 18L18 6M6 6l12 12" : "M4 6h16M4 12h16m-16 6h16"}
                   >
                 <svg>
               <button>
             <div>

             <div className="hidden sm:flex flex-1 items-center justify-between ">

               <div className="flex ml-auto space-x-4 ">
                 <Link to="Home" className="px-3 py-2 text-lg font-medium hover:bg-gray-700 rounded-md">
                   🏠 בית
                 <Link>
                 <Search >
                 {* <Link to="Search" className="px-3 py-2 text-lg font-medium hover:bg-gray-700 rounded-md">
                   🔍 חיפוש
                 <Link> *}


                 {renderDropdownMenu('dairy')}
                 {renderDropdownMenu('parve')}
                 {renderDropdownMenu('meat')}

                 <Link to="AllRecipes" className="px-3 py-2 text-lg font-medium hover:bg-gray-700 rounded-md">
                   📝 כל המתכונים
                 <Link>
                 <Link to="CreateRecipe" className="px-3 py-2 text-lg font-medium hover:bg-gray-700 rounded-md">
                   📝 יצירת מתכון
                 <Link>
                 {!currentUser ? (
                   <Link to="login" className="flex items-center gap-2 px-3 py-2 text-lg font-medium hover:bg-gray-700 rounded-md">
                     <IoPersonCircleSharp className="size-7 mt-1" >
                     <p className='font-bold text-yellow-300'>התחבר<p>
                   <Link>
                 ) : (
                   <div
                     className="relative"
                     onMouseEnter={handleUserMenuEnter}
                     onMouseLeave={handleUserMenuLeave}
                   >
                     <button
                       className="flex items-center gap-2 px-3 py-2 text-lg font-bold hover:bg-gray-700 rounded-md"
                     >
                       <IoPersonCircleSharp className="size-7 mt-1" >
                       <p className='font-bold text-yellow-300'>{currentUser.fullName}<p>
                     <button>
                     {isDropdownOpen && (
                       <div className="font-bold absolute right-0 mt-2 w-48 bg-white text-black rounded-md shadow-lg z-50 p-2">
                         <Link
                           to="PersonalArea"
                           className="block px-4 py-2 hover:bg-gray-100 rounded-md"
                         >
                           🧍 איזור אישי
                         <Link>
                         <Link
                           to="productsIliked"
                           className="w-full mt-3 mb-3 mr-4 hover:bg-gray-100 rounded-md flex items-center gap-2"
                         >
                           <IoIosHeart className='' > מתכונים שאהבתי
                         <Link>
                         <button
                           onClick={LogOut}
                           className="w-full px-4 py-2 hover:bg-gray-100 rounded-md flex items-center gap-2"
                         >
                           <RiLogoutBoxRFill className="size-5" > התנתק
                         <button>
                       <div>
                     )}
                   <div>
                 )}

                 {showLogoutConfirmation && (
                   <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50">
                     <div className="bg-white p-6 rounded-md shadow-lg w-80">
                       <h3 className="text-l text-black font-bold text-center">האם אתה בטוח שברצונך להתנתק?<h3>
                       <div className="flex justify-between mt-4">
                         <button onClick={LogOut} className="bg-red-600 text-white px-4 py-2 rounded-md">כן<button>
                         <button onClick={cancelLogout} className="bg-gray-300 text-black px-4 py-2 rounded-md">לא<button>
                       <div>
                     <div>
                   <div>
                 )}

               <div>

             <div>
           <div>

           {isMobileMenuOpen && (
             <div className="sm:hidden px-2 pt-2 pb-3 space-y-1">
               {* התוכן של תפריט המובייל *}
               {* כאן נשתמש גם ב-currentUser במקום user *}
             <div>
           )}
         <div>
       <nav>
       <h3 className="text-black font-bold mt-2 mr-2">בס"ד<h3>
     <>
   );
 };

 export default NavBar;
